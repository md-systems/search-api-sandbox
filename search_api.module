<?php

/**
 * @file
 * Contains the Search API hook implementations.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\TypedData\ComplexDataInterface;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Entity\Server;
use Drupal\search_api\Plugin\SearchApi\Datasource\ContentEntityDatasource;
use Drupal\search_api\Server\ServerInterface;
use Drupal\search_api\Utility\Utility;

/**
 * Implements hook_help().
 */
function search_api_help($path, $arg) {
  switch ($path) {
    case 'admin/config/search/search-api':
      return t('Below is a list of indexes grouped by the server they are associated with. A server is the definition of the actual indexing, querying and storage engine (e.g. an Apache Solr or MongoDB server). An index is the definition of the actual indexed content that will be searched against (e.g. A core within Solr).');
  }
}

/**
 * Implements hook_permission().
 */
function search_api_permission() {
  return array(
    'administer search_api' => array(
      'title' => t('Administer Search API'),
      'description' => t('Create and configure Search API servers and indexes.'),
    ),
  );
}

/**
 * Implements hook_entity_insert().
 *
 * Adds entries for all languages of the new entity to the tracking table for
 * each index that tracks entities of this type.
 */
function search_api_entity_insert(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if ($entity instanceof ContentEntityInterface) {
    $indexes = ContentEntityDatasource::getIndexesForEntity($entity);
    if (!$indexes) {
      return;
    }

    $item_ids = array();
    $entity_id = $entity->id();
    foreach (array_keys($entity->getTranslationLanguages()) as $langcode) {
      $item_ids[] = $entity_id . ':' . $langcode;
    }
    $datasource_id = 'entity:' . $entity->getEntityTypeId();
    foreach ($indexes as $index) {
      $index->trackItemsInserted($datasource_id, $item_ids);
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Updates the entry to the tracking table for each index that tracks this
 * entity.
 *
 * Also takes care of new or deleted translations.
 */
function search_api_entity_update(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if ($entity instanceof ContentEntityInterface) {
    $indexes = ContentEntityDatasource::getIndexesForEntity($entity);
    if (!$indexes) {
      return;
    }

    $entity_id = $entity->id();
    $combine_id = function($langcode) use ($entity_id) {
      return $entity_id . ':' . $langcode;
    };
    $inserted_item_ids = array();
    $updated_item_ids = array_keys($entity->getTranslationLanguages());
    $deleted_item_ids = array();
    $old_translations = array_keys($entity->original->getTranslationLanguages());
    foreach ($old_translations as $langcode) {
      if (!in_array($langcode, $updated_item_ids)) {
        $deleted_item_ids[] = $langcode;
      }
    }
    foreach ($updated_item_ids as $i => $langcode) {
      if (!in_array($langcode, $old_translations)) {
        unset($updated_item_ids[$i]);
        $inserted_item_ids[] = $langcode;
      }
    }

    $datasource_id = 'entity:' . $entity->getEntityTypeId();
    $inserted_item_ids = array_map($combine_id, $inserted_item_ids);
    $updated_item_ids = array_map($combine_id, $updated_item_ids);
    $deleted_item_ids = array_map($combine_id, $deleted_item_ids);
    foreach ($indexes as $index) {
      if ($inserted_item_ids) {
        $index->trackItemsInserted($datasource_id, $inserted_item_ids);
      }
      if ($updated_item_ids) {
        $index->trackItemsUpdated($datasource_id, $updated_item_ids);
      }
      if ($deleted_item_ids) {
        $index->trackItemsDeleted($datasource_id, $deleted_item_ids);
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes all entries for this entity from the tracking table for each index
 * that tracks this entity type.
 */
function search_api_entity_delete(EntityInterface $entity) {
  // Check if the entity is a content entity.
  if ($entity instanceof ContentEntityInterface) {
    $indexes = ContentEntityDatasource::getIndexesForEntity($entity);
    if (!$indexes) {
      return;
    }

    $item_ids = array();
    $entity_id = $entity->id();
    foreach (array_keys($entity->getTranslationLanguages()) as $langcode) {
      $item_ids[] = $entity_id . ':' . $langcode;
    }
    $datasource_id = 'entity:' . $entity->getEntityTypeId();
    foreach ($indexes as $index) {
      $index->trackItemsDeleted($datasource_id, $item_ids);
    }
  }
}

/**
 * Implements hook_theme().
 */
function search_api_theme() {
  return array(
    'search_api_admin_fields_table' => array(
      'render element' => 'element',
      'file' => 'search_api.theme.inc',
    ),
    'search_api_server' => array(
      'variables' => array('server' => NULL),
      'file' => 'search_api.theme.inc',
    ),
    'search_api_index' => array(
      'variables' => array('index' => NULL),
      'file' => 'search_api.theme.inc',
    ),
  );
}

/**
 * Implements hook_entity_type_build().
 */
function search_api_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['node'])) {
    $entity_types['node']->set('search_api_default_fields', array(
      'node:title' => array(
        'type' => 'string',
      ),
      'node:path' => array(
        'type' => 'string',
      ),
      'node:created' => array(
        'type' => 'date',
      ),
      'node:changed' => array(
        'type' => 'date',
      )
    ));
  }
}
